# The parser I wrote allows comments like this one.

# MATERIALS: We identify our materials by using keywords. Use the template below.
# material `material-ID` `material-type` `material-texture` `color (0-1) rgb` `emitting light boolean`
# material-types can be found in Project/Source/World_Creation/material.h
# material-texture can be found in Project/Source/World_Creation/material.h

material solid diffuse solid (1 0 0) false
material checkerboard diffuse checkerboard (0 0 1) false
material gradient diffuse gradient (1 1 1) false
material floor diffuse solid (0.7 0.7 0.8) false
material light diffuse solid (1 1 1) true
material glass glass solid (1 1 1) false 1.5
material biref birefringence solid (1 1 1) false 1.3 1.7
material mirror specular solid (1 1 1) false


# OBJECT CREATION: Here we create our scene with spheres and triangles. Use template below.
# sphere `location (x y z)` `radius` `material-ID`
# triangle `vertex 1 location` `vertex 2 location` `vertex 3 location` `material-ID` `rotation in degrees`

sphere (1 -2 0.6) 0.5 glass
sphere (-1 -3 1) 1 biref
sphere (0 0 1.1) 1 solid
sphere (-2 0 1.1) 1 checkerboard
sphere (2 0 1.1) 1 gradient
sphere (0 5 2) 2 mirror

# floor
sphere (0 0 -1000) 1000.1 glass
sphere (0 0 -1000) 1000 floor

# light
triangle (-6 -5 5) (-6 5 5) (6 -5 5) light 0
triangle (-6 5 5) (6 5 5) (6 -5 5) light 0

# THREADS: Determine how many threads you want the tracing to be calculated on.
threads 3

# RENDERING: rays `samples` `depth`
# The higher the samples the less grainy the image but slower it takes to complete the image.
# High depth value is only helpful when using specular images but it dictates how many times a ray bounces in a scene.
rays 100 30

# CAMERA
# camera `camera location` `camera target` `dictating what is up (z axis is up) and can flip scenes` `field of view`
camera (0 -40 4) (0 0 1) (0 0 1) 25

# PIXELS: width/height
pixels 1280 720

# OUPUT FILE: Name the image.
output example_input.png